# OpenAPI 3 has quite a difference with OpenAPI 2, the way the linter works in the editor will be based on this.
openapi: 3.0.0

# This section will contain metadata information about the API. It will be shown on the editor/UI when we publish this
info:
  title: Bet & Gain API Back-End
  version: 1.0.0
  description: API gérant la logique métier de l'application bet & gain à destination des applications clientes.

# The list of the servers that we can use to use the API. This will be rendered as a combo box in the editor/UI when we publish it, so the user could pick and use the endpoint they prefer.
servers:
  - url: http://localhost:11111
    description: DEV-ENV

paths:
  /api/competitions/: # the API path in which the operation will be performed. When this endpoint triggered, the operation meant to be executed.
  /api/competitions/matchs:
    get:
      operationId: getMatchs
      tags:
        - Matchs
      description: get all matchs
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/competitions/matchs/{code}/results:
    post:
      operationId: postResultsForMatch
      tags:
        - Matchs
      description: postResultsForMatch since API SCRAPPING
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/users:
    post:
      operationId: addUser
      tags:
        - Users
      description: add user
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
    get:
      operationId: getUsers
      tags:
        - Users
      description: get all user
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/users/{id}:
    put:
      operationId: editUser
      tags:
        - Users
      description: edit user
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/auth/signin:
    post:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/auth/signup:
    post:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/account/validate/{id}:
    post:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/profile/edit/{id}:
    put:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/profile/deposit/{id}:
    post:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/profile/withdraw/{id}:
    post:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/profile/moneyflows/{id}:
    get:
      operationId: validate
      tags:
        - Account
      description: validate user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidation'
      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/bets/communityBet/{id}:
    post:
      operationId: createCommunityBet
      tags:
        - Bets
      description: create a community bet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityBet'

      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/bets/communityBet/{id}/follow/{userId}:
    post:
      operationId: folllowCommunityBet
      tags:
        - Bets
      description: follow a other community bet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityBet'

      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/bets/{userId}:
    post:
      operationId: add bet
      tags:
        - Bets
      description: add bet on odd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityBet'

      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
  /api/bets/history/{userId}:
    post:
      operationId: history for users bets
      tags:
        - Bets
      description: add bet on odd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityBet'

      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'

components:
  schemas:
    MatchResponse:
      type: object

    AccountValidation:
      type: object
      properties:
        confirmationCode:
          type: string
          description: validation code sended by mail
          example: "AMEbiYeBJk"
    CommunityBet:
      type: object
      properties:
        treshold:
          type: int
          description: seuil de participation auquel la côte va être boostée
          example: 150